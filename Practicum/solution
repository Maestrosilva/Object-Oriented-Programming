#include <iostream>
#pragma warning (disable: 4996)
namespace ex1 {
	const size_t NAME_LEN = 20;
	enum Subjects {
		MATH,
		BEL,
		PHYS,
		CHEM
	};
	class Teacher {
	private:
		char name[NAME_LEN];
		size_t age;
		double salary;

	public:
		Teacher(const char name[NAME_LEN], const size_t age, const double salary) {
			setName(name);
			setAge(age);
			setSalary(salary);
		}

		void setName(const char* name) {
			if (name == nullptr || strlen(name) != NAME_LEN) {
				std::cerr << "Invalid name!";
				return;
			}
			strcpy(this->name, name);
		}

		void setAge(const size_t age) {
			const size_t MIN_AGE = 18;
			const size_t MAX_AGE = 70;
			if (age < MIN_AGE || age > MAX_AGE) {
				std::cerr << "Invalid age!";
				return;
			}
			this->age = age;
		}

		void setSalary(const double salary) {
			const size_t MIN_SALARY = 500;
			if (salary < MIN_SALARY) {
				std::cerr << "Invalid salary";
			}
			this->salary = salary;
		}

		char* getName() const {
			char* result = new char[NAME_LEN + 1];
			for (size_t i = 0; i < NAME_LEN; i++) {
				result[i] = name[i];
			}
			result[NAME_LEN] = 0;
			return result;
		}

		size_t getAge() const {
			return age;
		}

		size_t getSalary() const {
			return salary;
		}
	};
}

namespace ex2 {
	class Problem {
	private:
		char* description;
		char answer;
		size_t points;
		char* pass;

		void setDescription(const char* descr) {
			if (descr == nullptr) {
				std::cerr << "Nullptr!";
			}
			if (descr == this->description) {
				return;
			}
			delete[] this->description;
			this->description = new char[strlen(descr) + 1];
			strcpy(this->description, descr);
		}

		void setPass(const char* pass) {
			if (pass == nullptr) {
				std::cerr << "Nullptr!";
			}
			if (pass == this->pass) {
				return;
			}
			delete[] this->pass;
			this->pass = new char[strlen(pass) + 1];
			strcpy(this->pass, pass);
		}

		void setAnswer(char answer) {
			this->answer - answer;
		}

		void setPoints(size_t points) {
			this->points = points;
		}

	public:
		Problem(const char* descr, char answer, const size_t points, const char* pass) {
			setDescription(descr);
			setAnswer(answer);
			setPass(pass);
		}

		~Problem() {
			delete[] description;
			delete[] pass;
		}

		char* getDescription() const {
			return this->description;
		}

		size_t getPoints() const {
			return this->points;
		}

		void createProblem() {
		
		}

		void setAnswer(char answer, char* pass) {
			if(!strcmp(this->pass, pass))
			this->answer - answer;
		}

		void setPoints(size_t points, char* pass) {
			if (!strcmp(this->pass, pass))
			this->points = points;
		}
	};
}
